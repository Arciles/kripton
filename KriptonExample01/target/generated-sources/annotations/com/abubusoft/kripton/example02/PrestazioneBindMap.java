package com.abubusoft.kripton.example02;

import com.abubusoft.kripton.annotation.BindMap;
import com.abubusoft.kripton.binder.context.AbstractJacksonContext;
import com.abubusoft.kripton.binder.context.KriptonXmlContext;
import com.abubusoft.kripton.binder.core.AbstractMapper;
import com.abubusoft.kripton.binder.persistence.JacksonWrapperParser;
import com.abubusoft.kripton.binder.persistence.JacksonWrapperSerializer;
import com.abubusoft.kripton.binder.persistence.XmlWrapperParser;
import com.abubusoft.kripton.binder.persistence.XmlWrapperSerializer;
import com.abubusoft.kripton.binder.xml.XMLEventConstants;
import com.abubusoft.kripton.binder.xml.XmlParser;
import com.abubusoft.kripton.binder.xml.XmlSerializer;
import com.abubusoft.kripton.common.CollectionUtils;
import com.abubusoft.kripton.common.StringUtils;
import com.abubusoft.kripton.common.XmlAttributeUtils;
import com.abubusoft.kripton.escape.StringEscapeUtils;
import com.abubusoft.kripton.exception.KriptonRuntimeException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import java.io.IOException;
import java.lang.Exception;
import java.lang.Override;
import java.lang.String;
import java.util.ArrayList;

/**
 * This class is the shared preference binder defined for Prestazione
 *
 * <p><strong>This class is generated by Kripton Annotation Processor (1.5.0-SNAPSHOT)</strong></p>
 *
 * @since Thu Dec 15 21:17:08 CET 2016
 * @see Prestazione
 */
@BindMap
public class PrestazioneBindMap extends AbstractMapper<Prestazione> {
  /**
   * create new object instance
   */
  @Override
  public Prestazione createInstance() {
    return new Prestazione();
  }

  /**
   * reset shared preferences
   */
  @Override
  public int serializeOnJackson(AbstractJacksonContext context, Prestazione object, JacksonWrapperSerializer wrapper) {
    try {
      JsonGenerator jacksonSerializer = wrapper.jacksonGenerator;
      jacksonSerializer.writeStartObject();
      int fieldCount=0;

      // Serialized Field:

      // field info
      if (object.info!=null)  {
        fieldCount++;
        jacksonSerializer.writeStringField("info", object.info);
      }

      // field tags
      if (object.tags!=null)  {
        fieldCount++;
        int n=object.tags.length;
        String item;
        // write wrapper tag
        jacksonSerializer.writeFieldName("tags");
        jacksonSerializer.writeStartArray();
        for (int i=0; i<n; i++) {
          item=object.tags[i];
          if (item==null) {
            jacksonSerializer.writeNull();
          } else {
            jacksonSerializer.writeString(item);
          }
        }
        jacksonSerializer.writeEndArray();
      }

      // field code
      if (object.code!=null)  {
        fieldCount++;
        jacksonSerializer.writeStringField("code", object.code);
      }

      // field description
      if (object.description!=null)  {
        fieldCount++;
        jacksonSerializer.writeStringField("description", object.description);
      }

      // field prenotationType
      if (object.prenotationType!=null)  {
        fieldCount++;
        jacksonSerializer.writeFieldName("prenotationType");
        context.mapperFor(Prenotabilita.class).serializeOnJackson(context, object.prenotationType, wrapper);
      }

      jacksonSerializer.writeEndObject();
      return fieldCount;
    } catch(IOException e) {
      e.printStackTrace();
      throw (new KriptonRuntimeException(e));
    }
  }

  /**
   * reset shared preferences
   */
  @Override
  public int serializeOnJacksonAsString(AbstractJacksonContext context, Prestazione object, JacksonWrapperSerializer wrapper) {
    try {
      JsonGenerator jacksonSerializer = wrapper.jacksonGenerator;
      jacksonSerializer.writeStartObject();
      int fieldCount=0;

      // Serialized Field:

      // field info
      if (object.info!=null)  {
        fieldCount++;
        jacksonSerializer.writeStringField("info", object.info);
      }

      // field tags
      if (object.tags!=null)  {
        fieldCount++;
        int n=object.tags.length;
        String item;
        // write wrapper tag
        jacksonSerializer.writeFieldName("tags");
        if (n>0) {
          jacksonSerializer.writeStartArray();
          for (int i=0; i<n; i++) {
            item=object.tags[i];
            if (item==null) {
              jacksonSerializer.writeString("null");
            } else {
              jacksonSerializer.writeString(item);
            }
          }
          jacksonSerializer.writeEndArray();
        } else {
          jacksonSerializer.writeString("");
        }
      }

      // field code
      if (object.code!=null)  {
        fieldCount++;
        jacksonSerializer.writeStringField("code", object.code);
      }

      // field description
      if (object.description!=null)  {
        fieldCount++;
        jacksonSerializer.writeStringField("description", object.description);
      }

      // field prenotationType
      if (object.prenotationType!=null)  {
        fieldCount++;
        jacksonSerializer.writeFieldName("prenotationType");
        if (context.mapperFor(Prenotabilita.class).serializeOnJacksonAsString(context, object.prenotationType, wrapper)==0) {
          jacksonSerializer.writeNullField("prenotationType");
        }
      }

      jacksonSerializer.writeEndObject();
      return fieldCount;
    } catch(IOException e) {
      e.printStackTrace();
      throw (new KriptonRuntimeException(e));
    }
  }

  /**
   * reset shared preferences
   */
  @Override
  public void serializeOnXml(KriptonXmlContext context, Prestazione object, XmlWrapperSerializer wrapper, int currentEventType) {
    try {
      XmlSerializer xmlSerializer = wrapper.xmlSerializer;
      if (currentEventType == 0) {
        xmlSerializer.writeStartElement("prestazione");
      }

      // Persisted fields:

      // field info
      if (object.info!=null) {
        xmlSerializer.writeStartElement("info");
        xmlSerializer.writeCharacters(StringEscapeUtils.escapeXml10(object.info));
        xmlSerializer.writeEndElement();
      }

      // field tags
      if (object.tags!=null)  {
        int n=object.tags.length;
        String item;
        for (int i=0; i<n; i++) {
          item=object.tags[i];
          if (item==null) {
            xmlSerializer.writeEmptyElement("tags");
          } else {
            xmlSerializer.writeStartElement("tags");
            xmlSerializer.writeCharacters(StringEscapeUtils.escapeXml10(item));
            xmlSerializer.writeEndElement();
          }
        }
        // to distinguish between first empty element and empty collection, we write an attribute emptyCollection
        if (n==0) {
          xmlSerializer.writeStartElement("tags");
          xmlSerializer.writeAttribute("emptyCollection", "true");
          xmlSerializer.writeEndElement();
        }
      }

      // field code
      if (object.code!=null) {
        xmlSerializer.writeStartElement("codicePrestazione");
        xmlSerializer.writeCharacters(StringEscapeUtils.escapeXml10(object.code));
        xmlSerializer.writeEndElement();
      }

      // field description
      if (object.description!=null) {
        xmlSerializer.writeStartElement("descrizione");
        xmlSerializer.writeCharacters(StringEscapeUtils.escapeXml10(object.description));
        xmlSerializer.writeEndElement();
      }

      // field prenotationType
      if (object.prenotationType!=null)  {
        xmlSerializer.writeStartElement("prenotabilita");
        context.mapperFor(Prenotabilita.class).serializeOnXml(context, object.prenotationType, wrapper, 1);
        xmlSerializer.writeEndElement();
      }

      if (currentEventType == 0) {
        xmlSerializer.writeEndElement();
      }
    } catch(Exception e) {
      e.printStackTrace();
      throw (new KriptonRuntimeException(e));
    }
  }

  /**
   * create new object instance
   */
  @Override
  public Prestazione parseOnJackson(AbstractJacksonContext context, JacksonWrapperParser wrapper) {
    try {
      JsonParser jacksonParser = wrapper.jacksonParser;
      Prestazione instance = createInstance();
      String fieldName;
      if (jacksonParser.currentToken() == null) {
        jacksonParser.nextToken();
      }
      if (jacksonParser.currentToken() != JsonToken.START_OBJECT) {
        jacksonParser.skipChildren();
        return instance;
      }
      while (jacksonParser.nextToken() != JsonToken.END_OBJECT) {
        fieldName = jacksonParser.getCurrentName();
        jacksonParser.nextToken();

        // Parse fields:
        switch (fieldName) {
            case "info":
              // field info
              if (jacksonParser.currentToken()!=JsonToken.VALUE_NULL) {
                instance.info=jacksonParser.getText();
              }
            break;
            case "tags":
              // field tags
              if (jacksonParser.currentToken()==JsonToken.START_ARRAY) {
                ArrayList<String> collection=new ArrayList<>();
                String item=null;
                while (jacksonParser.nextToken() != JsonToken.END_ARRAY) {
                  if (jacksonParser.currentToken()==JsonToken.VALUE_NULL) {
                    item=null;
                  } else {
                    item=jacksonParser.getText();
                  }
                  collection.add(item);
                }
                instance.tags=CollectionUtils.asArray(collection, new String[collection.size()]);
              }
            break;
            case "code":
              // field code
              if (jacksonParser.currentToken()!=JsonToken.VALUE_NULL) {
                instance.code=jacksonParser.getText();
              }
            break;
            case "description":
              // field description
              if (jacksonParser.currentToken()!=JsonToken.VALUE_NULL) {
                instance.description=jacksonParser.getText();
              }
            break;
            case "prenotationType":
              // field prenotationType
              if (jacksonParser.currentToken()==JsonToken.START_OBJECT) {
                instance.prenotationType=context.mapperFor(Prenotabilita.class).parseOnJackson(context, wrapper);
              }
            break;
            default:
              jacksonParser.skipChildren();
            break;}
      }
      return instance;
    } catch (IOException e) {
      e.printStackTrace();
      throw new KriptonRuntimeException(e);
    }
  }

  /**
   * create new object instance
   */
  @Override
  public Prestazione parseOnJacksonAsString(AbstractJacksonContext context, JacksonWrapperParser wrapper) {
    try {
      JsonParser jacksonParser = wrapper.jacksonParser;
      Prestazione instance = createInstance();
      String fieldName;
      if (jacksonParser.getCurrentToken() == null) {
        jacksonParser.nextToken();
      }
      if (jacksonParser.getCurrentToken() != JsonToken.START_OBJECT) {
        jacksonParser.skipChildren();
        return instance;
      }
      while (jacksonParser.nextToken() != JsonToken.END_OBJECT) {
        fieldName = jacksonParser.getCurrentName();
        jacksonParser.nextToken();

        // Parse fields:
        switch (fieldName) {
            case "info":
              // field info
              if (jacksonParser.currentToken()!=JsonToken.VALUE_NULL) {
                instance.info=jacksonParser.getText();
              }
            break;
            case "tags":
              // field tags
              if (jacksonParser.currentToken()==JsonToken.START_ARRAY) {
                ArrayList<String> collection=new ArrayList<>();
                String item=null;
                String tempValue=null;
                while (jacksonParser.nextToken() != JsonToken.END_ARRAY) {
                  tempValue=jacksonParser.getValueAsString();
                  if (jacksonParser.currentToken()==JsonToken.VALUE_STRING && "null".equals(tempValue)) {
                    item=null;
                  } else {
                    if (jacksonParser.currentToken()!=JsonToken.VALUE_NULL) {
                      item=jacksonParser.getText();
                    }
                  }
                  collection.add(item);
                }
                instance.tags=CollectionUtils.asArray(collection, new String[collection.size()]);
              } else if (jacksonParser.currentToken()==JsonToken.VALUE_STRING && !StringUtils.hasText(jacksonParser.getValueAsString())) {
                ArrayList<String> collection=new ArrayList<>();
                instance.tags=CollectionUtils.asArray(collection, new String[collection.size()]);
              }
            break;
            case "code":
              // field code
              if (jacksonParser.currentToken()!=JsonToken.VALUE_NULL) {
                instance.code=jacksonParser.getText();
              }
            break;
            case "description":
              // field description
              if (jacksonParser.currentToken()!=JsonToken.VALUE_NULL) {
                instance.description=jacksonParser.getText();
              }
            break;
            case "prenotationType":
              // field prenotationType
              if (jacksonParser.currentToken()==JsonToken.START_OBJECT || jacksonParser.currentToken()==JsonToken.VALUE_STRING) {
                instance.prenotationType=context.mapperFor(Prenotabilita.class).parseOnJacksonAsString(context, wrapper);
              }
            break;
            default:
              jacksonParser.skipChildren();
            break;}
      }
      return instance;
    } catch (IOException e) {
      e.printStackTrace();
      throw new KriptonRuntimeException(e);
    }
  }

  /**
   * create new object instance
   */
  @Override
  public Prestazione parseOnXml(KriptonXmlContext context, XmlWrapperParser wrapper, int currentEventType) {
    try {
      XmlParser xmlParser = wrapper.xmlParser;
      Prestazione instance = createInstance();
      int eventType = currentEventType;
      boolean read=true;

      if (currentEventType == 0) {
        eventType = xmlParser.next();
      } else {
        eventType = xmlParser.getEventType();
      }
      String currentTag = xmlParser.getName().toString();
      String elementName = currentTag;
      // No attributes found

      //sub-elements
      while (xmlParser.hasNext() && elementName!=null) {
        if (read) {
          eventType = xmlParser.next();
        } else {
          eventType = xmlParser.getEventType();
        }
        read=true;
        switch(eventType) {
            case XMLEventConstants.START_ELEMENT:
              currentTag = xmlParser.getName().toString();
              switch(currentTag) {
                  case "info":
                    // property info
                    instance.info=StringEscapeUtils.unescapeXml(xmlParser.getElementText());
                  break;
                  case "tags":
                    // property tags
                     {
                      ArrayList<String> collection=new ArrayList<>();
                      String item;
                      // add first element
                      item=null;
                      if (xmlParser.isEmptyElement()) {
                        // if there's a an empty collection it marked with attribute emptyCollection
                        if (XmlAttributeUtils.getAttributeAsBoolean(xmlParser, "emptyCollection", false)==false) {
                          collection.add(item);
                        }
                        xmlParser.nextTag();
                      } else {
                        item=StringEscapeUtils.unescapeXml(xmlParser.getElementText());
                        collection.add(item);
                      }
                      while (xmlParser.nextTag() != XMLEventConstants.END_ELEMENT && xmlParser.getName().toString().equals("tags")) {
                        if (xmlParser.isEmptyElement()) {
                          item=null;
                          xmlParser.nextTag();
                        } else {
                          item=StringEscapeUtils.unescapeXml(xmlParser.getElementText());
                        }
                        collection.add(item);
                      }
                      instance.tags=CollectionUtils.asArray(collection, new String[collection.size()]);
                      read=false;
                    }
                  break;
                  case "codicePrestazione":
                    // property code
                    instance.code=StringEscapeUtils.unescapeXml(xmlParser.getElementText());
                  break;
                  case "descrizione":
                    // property description
                    instance.description=StringEscapeUtils.unescapeXml(xmlParser.getElementText());
                  break;
                  case "prenotabilita":
                    // property prenotationType
                    instance.prenotationType=context.mapperFor(Prenotabilita.class).parseOnXml(context, wrapper, eventType);
                  break;
                  default:
                    xmlParser.skipElement();
                  break;
                }
              break;
              case XMLEventConstants.END_ELEMENT:
                if (elementName.equals(xmlParser.getName().getLocalPart())) {
                  currentTag = elementName;
                  elementName = null;
                }
              break;
              case XMLEventConstants.CDATA:
              case XMLEventConstants.CHARACTERS:
                // no property is binded to VALUE o CDATA break;
              default:
              break;
          }
        }
        return instance;
      } catch(Exception e) {
        e.printStackTrace();
        throw (new KriptonRuntimeException(e));
      }
    }
  }
