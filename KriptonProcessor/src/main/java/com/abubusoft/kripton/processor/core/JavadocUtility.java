/*******************************************************************************
 * Copyright 2015, 2016 Francesco Benincasa.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
package com.abubusoft.kripton.processor.core;

import java.util.Date;
import java.util.List;

import javax.lang.model.type.TypeMirror;

import com.abubusoft.kripton.common.Pair;
import com.abubusoft.kripton.common.StringUtil;
import com.abubusoft.kripton.processor.BindDataSourceProcessor;
import com.abubusoft.kripton.processor.Version;
import com.abubusoft.kripton.processor.sqlite.PropertyList;
import com.abubusoft.kripton.processor.sqlite.SQLiteSelectBuilder.SelectResultType;
import com.abubusoft.kripton.processor.sqlite.model.SQLProperty;
import com.abubusoft.kripton.processor.sqlite.model.SQLiteModelMethod;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterSpec;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec.Builder;

public abstract class JavadocUtility {
	/**
	 * @param builder
	 * 
	 */
	public static void generateJavadocGeneratedBy(Builder builder) {
		if (!BindDataSourceProcessor.DEVELOP_MODE) {
			builder.addJavadoc("<p><strong>This class is generated by Kripton Annotation Processor ($L)</strong></p>\n\n", Version.getVersion());
			builder.addJavadoc(" @since $L\n", (new Date()).toString());
		}
	}

	public static void generateJavaDocForSelect(MethodSpec.Builder methodBuilder, String sql, List<String> sqlParams, SQLiteModelMethod method, ModelAnnotation annotation, PropertyList fieldList, SelectResultType selectResultType) {
		methodBuilder.addJavadoc("<p>Select SQL:</p>\n", annotation.getSimpleName());
		methodBuilder.addJavadoc("<pre>$L</pre>\n\n", sql);

		if (sqlParams.size() > 0) {
			methodBuilder.addJavadoc("<p>Query's parameters are:</p>\n");
			methodBuilder.addJavadoc("<ul>");
			String separator = "\n";
			for (String param : sqlParams) {
				methodBuilder.addJavadoc(separator + "\t<li>Param <strong>$L</strong> is binded to method's parameter <strong>$L</strong></li>", param, method.findParameterNameByAlias(param));
			}
			methodBuilder.addJavadoc("\n</ul>\n\n");
		}
		
		// there will be alway some projected column
		{			
			methodBuilder.addJavadoc("<p>Projected columns are:</p>\n");
			methodBuilder.addJavadoc("<ul>\n");
			int i=0;
			String[] columnList=fieldList.value0.split(",");
			for (String column: columnList)
			{
				methodBuilder.addJavadoc("\t<li>");
				methodBuilder.addJavadoc("<strong>$L</strong>", column.trim());
				
				// display field info only it exists
				if (fieldList.value1.get(i)!=null)
				{
					SQLProperty attribute = fieldList.value1.get(i);
					methodBuilder.addJavadoc(" is associated to bean's property <strong>$L</strong>", attribute.name);
				}
				methodBuilder.addJavadoc("</li>\n");
				i++;
			}
			methodBuilder.addJavadoc("</ul>\n\n");
			
		
		//methodBuilder.addJavadoc("<pre>[$L]</pre>\n\n", fieldList.value0);
		}

		ParameterSpec parameterSpec;
		for (Pair<String, TypeMirror> item : method.getParameters()) {
			parameterSpec = ParameterSpec.builder(TypeName.get(item.value1), item.value0).build();

			methodBuilder.addJavadoc("@param $L\n", parameterSpec.name);
		}

		switch (selectResultType) {
		case BEAN:
			methodBuilder.addJavadoc("\n@return selected bean or <code>null</code>.\n");
			break;
		case CURSOR:
			methodBuilder.addJavadoc("\n@return cursor. Closing the cursor is delegated to the calling code.\n");
			break;
		case LIST_BEAN:
			methodBuilder.addJavadoc("\n@return list of bean or empty list.\n");
			break;
		case LIST_SCALAR:
			methodBuilder.addJavadoc("\n@return list of single value extracted with query.\n");
			break;
		case LISTENER_BEAN:
		case LISTENER_CURSOR:
			break;
		case SCALAR:
			methodBuilder.addJavadoc("\n@return single value extracted with query.\n");
			break;
		}
	}
}
