package com.abubusoft.kripton.processor.sqlite;

import static com.abubusoft.kripton.processor.core.reflect.TypeUtility.typeName;

import java.util.Date;

import javax.annotation.processing.Filer;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.PackageElement;
import javax.lang.model.util.Elements;

import android.content.ContentValues;
import android.database.sqlite.SQLiteDatabase;

import com.abubusoft.kripton.android.annotation.SQLDaoImplementation;
import com.abubusoft.kripton.android.annotation.SQLDelete;
import com.abubusoft.kripton.android.annotation.SQLDeleteBean;
import com.abubusoft.kripton.android.annotation.SQLInsert;
import com.abubusoft.kripton.android.annotation.SQLInsertBean;
import com.abubusoft.kripton.android.annotation.SQLSelect;
import com.abubusoft.kripton.android.annotation.SQLSelectBean;
import com.abubusoft.kripton.android.annotation.SQLUpdate;
import com.abubusoft.kripton.android.annotation.SQLUpdateBean;
import com.abubusoft.kripton.processor.sqlite.model.DaoDefinition;
import com.abubusoft.kripton.processor.sqlite.model.SQLiteDatabaseSchema;
import com.abubusoft.kripton.processor.sqlite.model.SQLiteModelElementVisitor;
import com.abubusoft.kripton.processor.sqlite.model.SQLiteModelMethod;
import com.squareup.javapoet.AnnotationSpec;
import com.squareup.javapoet.CodeBlock;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.TypeSpec;
import com.squareup.javapoet.TypeSpec.Builder;

/**
 * Dao generator
 * 
 * @author xcesco
 *
 */
public class DaoGenerator implements SQLiteModelElementVisitor {

	public static final String SUFFIX = "Impl";
	protected Elements elementUtils;
	protected Filer filer;
	private Builder builder;

	private DaoDefinition currentDaoDefinition;
	private SQLiteDatabaseSchema model;

	public DaoGenerator(SQLiteDatabaseSchema model, Elements elementUtils, Filer filer) {
		this.model = model;
		this.elementUtils = elementUtils;
		this.filer = filer;
	}

	public static void generate(Elements elementUtils, Filer filer, SQLiteDatabaseSchema model) throws Exception {
		DaoGenerator visitor = new DaoGenerator(model, elementUtils, filer);

		for (DaoDefinition item : model.getCollection()) {
			item.accept(visitor);
		}
	}

	@Override
	public void visit(DaoDefinition value) throws Exception {
		currentDaoDefinition = value;
		String classTableName = value.getName() + SUFFIX;

		PackageElement pkg = elementUtils.getPackageOf(value.getElement());
		String packageName = pkg.isUnnamed() ? null : pkg.getQualifiedName().toString();

		builder = TypeSpec.classBuilder(classTableName).addSuperinterface(typeName(value.getElement())).addModifiers(Modifier.PUBLIC);
		//builder.addAnnotation(AnnotationSpec.builder(SQLDaoImplementation.class).addMember("schema", CodeBlock.of("$T", model.getElement().asType())).build());
		// generiamo il javadoc contenente la data di generazione della classe
		builder.addJavadoc("Generated by Kripton Library.\n\n @since $L\n\n", (new Date()).toString());
		// builder.addMethod(buildCreateMethod(definition, elementUtils));

		// add database field
		FieldSpec fieldDatabase = FieldSpec.builder(SQLiteDatabase.class, "database", Modifier.PROTECTED).build();// .initializer("\"$L\"", classNameConverter.convert(value.getName())).build();
		builder.addField(fieldDatabase);

		// add content value field
		FieldSpec fieldContentValues = FieldSpec.builder(ContentValues.class, "contentValues", Modifier.PROTECTED).initializer("new ContentValues()").build();
		builder.addField(fieldContentValues);

		// define column name set
		for (SQLiteModelMethod item : value.getCollection()) {
			item.accept(this);
		}

		TypeSpec typeSpec = builder.build();
		JavaFile.builder(packageName, typeSpec).build().writeTo(filer);

	}

	@Override
	public void visit(SQLiteModelMethod value) throws Exception {

		if (value.getAnnotation(SQLInsert.class) != null) {
			SQLiteInsertBuilder.generate(elementUtils, builder, model, currentDaoDefinition, value);
		} else if (value.getAnnotation(SQLInsertBean.class) != null) {
			SQLiteInsertBeanBuilder.generate(elementUtils, builder, model, currentDaoDefinition, value);
		} else if (value.getAnnotation(SQLUpdate.class) != null) {
			SQLiteUpdateBuilder.generate(elementUtils, builder, model, currentDaoDefinition, value);
		} else if (value.getAnnotation(SQLUpdateBean.class) != null) {
			SQLiteUpdateBeanBuilder.generate(elementUtils, builder, model, currentDaoDefinition, value);
		} else if (value.getAnnotation(SQLDelete.class) != null) {
			SQLiteDeleteBuilder.generate(elementUtils, builder, model, currentDaoDefinition, value);
		} else if (value.getAnnotation(SQLDeleteBean.class) != null) {
			SQLiteDeleteBeanBuilder.generate(elementUtils, builder, model, currentDaoDefinition, value);
		} else if (value.getAnnotation(SQLSelect.class) != null) {
			SQLiteSelectBuilder.generate(elementUtils, builder, model, currentDaoDefinition, value);
		} else if (value.getAnnotation(SQLSelectBean.class) != null) {
			SQLiteSelectBeanBuilder.generate(elementUtils, builder, model, currentDaoDefinition, value);
		}

	}

}
