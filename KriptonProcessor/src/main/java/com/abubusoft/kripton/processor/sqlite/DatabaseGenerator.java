package com.abubusoft.kripton.processor.sqlite;

import static com.abubusoft.kripton.processor.core.reflect.TypeUtility.className;

import javax.annotation.processing.Filer;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.PackageElement;
import javax.lang.model.util.Elements;

import com.abubusoft.kripton.processor.sqlite.model.DaoDefinition;
import com.abubusoft.kripton.processor.sqlite.model.SQLiteDatabaseSchema;
import com.google.common.base.CaseFormat;
import com.google.common.base.Converter;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeSpec;

/**
 * Generates database class
 * 
 * @author xcesco
 *
 */
public class DatabaseGenerator extends AbstractCodeGenerator  {

	public static final String SUFFIX = "Database";
	
	public static final String SUFFIX_TO_REMOVE = "Schema";

	public DatabaseGenerator(Elements elementUtils, Filer filer, SQLiteDatabaseSchema model) {
		super(elementUtils, filer, model);
	}

	/**
	 * Generate database
	 * 
	 * @param elementUtils
	 * @param filer
	 * @param schema
	 * @throws Exception
	 */
	public static void generate(Elements elementUtils, Filer filer, SQLiteDatabaseSchema schema) throws Exception {
		DatabaseGenerator visitor = new DatabaseGenerator(elementUtils, filer, schema);
		
		visitor.buildDatabase(elementUtils, filer, schema);
	}

	public void buildDatabase(Elements elementUtils, Filer filer, SQLiteDatabaseSchema schema) throws Exception {
		Converter<String, String> convert = CaseFormat.UPPER_CAMEL.converterTo(CaseFormat.LOWER_CAMEL);
		
		String schemaName =  schema.getName();
		if (schemaName.endsWith(SUFFIX_TO_REMOVE))
		{
			schemaName=schemaName.substring(0, schemaName.lastIndexOf(SUFFIX_TO_REMOVE));
		}
		
		if (!schemaName.endsWith(SUFFIX))
		{
			schemaName+=SUFFIX;
		}
		
		PackageElement pkg = elementUtils.getPackageOf(schema.getElement());
		String packageName = pkg.isUnnamed() ? null : pkg.getQualifiedName().toString();
		
		builder = TypeSpec.classBuilder(schemaName).addModifiers(Modifier.PUBLIC);
		
		
		// define static fields
		builder.addField(className(schemaName), "instance", Modifier.PRIVATE, Modifier.STATIC);
		
		builder.addField(FieldSpec.builder(String.class, "name", Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL).initializer("$S", schema.fileName).build());
		
		builder.addField(FieldSpec.builder(Integer.TYPE, "version", Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL).initializer("$L", schema.version).build());
		
		
		for (DaoDefinition dao : schema.getCollection()) {
			builder.addField(FieldSpec.builder(className(dao.getName()+"Impl"),convert.convert(dao.getName()), Modifier.PROTECTED).build());
			
			MethodSpec.Builder methodBuilder=MethodSpec.methodBuilder("get"+dao.getName()).returns(className(dao.getName()));
			methodBuilder.addCode("return $L;\n", convert.convert(dao.getName()));
			builder.addMethod(methodBuilder.build());
		}
		
		//builder.addField(FieldSpec.builder(className("DaoInteger.TYPE, "version", Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL).initializer("$L", schema.version).build());			
		
		
		/*
		SQLEntity entity=(SQLEntity) modelEntity;

		builder = TypeSpec.classBuilder(classTableName).addModifiers(Modifier.PUBLIC);
		// generiamo il javadoc contenente la data di generazione della classe
		builder.addJavadoc("Generated by Kripton Library.\n\n @since $L\n\n", (new Date()).toString());
		// builder.addMethod(buildCreateMethod(definition, elementUtils));

		columnNameConverter = CaseFormat.UPPER_CAMEL.converterTo(CaseFormat.UPPER_UNDERSCORE);

		{
			// table_name
			FieldSpec fieldSpec = FieldSpec.builder(String.class, "TABLE_NAME", Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL).initializer("\"$L\"", model.classNameConverter.convert(modelEntity.getSimpleName())).build();
			builder.addField(fieldSpec);
		}
		
		{
			// create table SQL
			// "CREATE TABLE IF NOT EXISTS TutorialsPoint(Username VARCHAR,Password VARCHAR);"
			FieldSpec.Builder fieldSpec = FieldSpec.builder(String.class, "CREATE_TABLE_SQL").addModifiers(Modifier.STATIC, Modifier.FINAL, Modifier.PUBLIC);			
			
			StringBuilder buffer=new StringBuilder();
			buffer.append("CREATE TABLE "+model.classNameConverter.convert(modelEntity.getSimpleName()));
			// define column name set
			
			String separator=" ";
			// primary key can be column id or that marked as PRIMARY_KEY
			ModelProperty primaryKey = entity.getPrimaryKey();
			ModelAnnotation annotation;
			
			buffer.append("(");
			for (ModelProperty item : entity.getCollection()) {
				buffer.append(separator);
				buffer.append(model.classNameConverter.convert(item.getName()));
				buffer.append(" "+Transformer.columnType(item));
				
				annotation=item.getAnnotation(BindColumn.class);
				
				if (annotation!=null)
				{
					ColumnType columnType=ColumnType.valueOf(AnnotationUtility.extractAsEnumerationValue(elementUtils, item, annotation, AnnotationAttributeType.ATTRIBUTE_VALUE));
					switch(columnType)
					{
					case PRIMARY_KEY:
						buffer.append(" PRIMARY KEY AUTOINCREMENT");
						break;
					case UNIQUE:
						buffer.append(" UNIQUE");
						break;
					case STANDARD:
						break;
					case FOREIGN_KEY:
						break;
					}
					
					boolean nullable=Boolean.valueOf(AnnotationUtility.extractAsEnumerationValue(elementUtils, item, annotation, AnnotationAttributeType.ATTRIBUTE_NULLABLE));				
					if (!nullable)
					{
						buffer.append(" NOT NULL");
					}
				} else if (primaryKey.equals(item)) {
					buffer.append(" PRIMARY KEY AUTOINCREMENT");
				}
				
				separator=", ";
			}
			buffer.append(")");
			buffer.append(";");
			builder.addField(fieldSpec.initializer("$S",buffer.toString()).build());						
		}
		
		{			
			// drop table SQL
			// "CREATE TABLE IF NOT EXISTS TutorialsPoint(Username VARCHAR,Password VARCHAR);"
			String sql="DROP TABLE IF EXISTS "+model.classNameConverter.convert(modelEntity.getSimpleName())+";";
			
			FieldSpec fieldSpec = FieldSpec.builder(String.class, "DROP_TABLE_SQL").addModifiers(Modifier.STATIC, Modifier.FINAL, Modifier.PUBLIC).initializer("$S",sql).build();
			builder.addField(fieldSpec);
		}

		// define column name set
		for (ModelProperty item : modelEntity.getCollection()) {
			item.accept(this);
		}
*/
		TypeSpec typeSpec = builder.build();
		JavaFile.builder(packageName, typeSpec).build().writeTo(filer);
	}

}
