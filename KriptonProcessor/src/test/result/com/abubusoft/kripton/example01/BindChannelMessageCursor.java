package com.abubusoft.kripton.example01;

import android.database.Cursor;
import java.util.LinkedList;

/**
 * Generated by Kripton Library.
 *
 *  @since Fri Jun 17 19:41:23 CEST 2016
 *
 */
public class BindChannelMessageCursor {
  protected Cursor cursor;

  /**
   * Index for column "uid"
   */
  protected int index0;

  /**
   * Index for column "id"
   */
  protected int index1;

  /**
   * Index for column "image"
   */
  protected int index2;

  /**
   * Index for column "day"
   */
  protected int index3;

  /**
   * Index for column "ownerUid"
   */
  protected int index4;

  /**
   * Index for column "text"
   */
  protected int index5;

  /**
   * Index for column "type"
   */
  protected int index6;

  /**
   * Index for column "updateTime"
   */
  protected int index7;

  /**
   * Index for column "valid"
   */
  protected int index8;

  BindChannelMessageCursor(Cursor cursor) {
    wrap(cursor);
  }

  public BindChannelMessageCursor wrap(Cursor cursor) {
    this.cursor=cursor;

    index0=cursor.getColumnIndex("uid");
    index1=cursor.getColumnIndex("id");
    index2=cursor.getColumnIndex("image");
    index3=cursor.getColumnIndex("day");
    index4=cursor.getColumnIndex("owner_uid");
    index5=cursor.getColumnIndex("text");
    index6=cursor.getColumnIndex("type");
    index7=cursor.getColumnIndex("update_time");
    index8=cursor.getColumnIndex("valid");

    return this;
  }

  public LinkedList<ChannelMessage> execute() {

    LinkedList<ChannelMessage> resultList=new LinkedList<ChannelMessage>();
    ChannelMessage resultBean=new ChannelMessage();

    if (cursor.moveToFirst()) {
      do
       {
        resultBean=new ChannelMessage();

        if (index0>=0 && !cursor.isNull(index0)) { resultBean.setUid(cursor.getString(index0));}
        if (index1>=0 && !cursor.isNull(index1)) { resultBean.setId(cursor.getLong(index1));}
        if (index2>=0 && !cursor.isNull(index2)) { resultBean.setImage(cursor.getBlob(index2));}
        if (index3>=0 && !cursor.isNull(index3)) { resultBean.setDay(DayType.valueOf(cursor.getString(index3)));}
        if (index4>=0 && !cursor.isNull(index4)) { resultBean.setOwnerUid(cursor.getString(index4));}
        if (index5>=0 && !cursor.isNull(index5)) { resultBean.setText(cursor.getString(index5));}
        if (index6>=0 && !cursor.isNull(index6)) { resultBean.setType(cursor.getString(index6));}
        if (index7>=0 && !cursor.isNull(index7)) { resultBean.setUpdateTime(cursor.getLong(index7));}
        if (index8>=0 && !cursor.isNull(index8)) { resultBean.setValid(cursor.getInt(index8)==0?false:true);}

        resultList.add(resultBean);
      } while (cursor.moveToNext());
    }
    cursor.close();

    return resultList;
  }

  public void executeListener(OnChannelMessageListener listener) {
    ChannelMessage resultBean=new ChannelMessage();

    if (cursor.moveToFirst()) {
      do
       {
        if (index0>=0) { resultBean.setUid(null);}
        if (index1>=0) { resultBean.setId(0L);}
        if (index2>=0) { resultBean.setImage(null);}
        if (index3>=0) { resultBean.setDay(null);}
        if (index4>=0) { resultBean.setOwnerUid(null);}
        if (index5>=0) { resultBean.setText(null);}
        if (index6>=0) { resultBean.setType(null);}
        if (index7>=0) { resultBean.setUpdateTime(0L);}
        if (index8>=0) { resultBean.setValid(false);}

        if (index0>=0 && !cursor.isNull(index0)) { resultBean.setUid(cursor.getString(index0));}
        if (index1>=0 && !cursor.isNull(index1)) { resultBean.setId(cursor.getLong(index1));}
        if (index2>=0 && !cursor.isNull(index2)) { resultBean.setImage(cursor.getBlob(index2));}
        if (index3>=0 && !cursor.isNull(index3)) { resultBean.setDay(DayType.valueOf(cursor.getString(index3)));}
        if (index4>=0 && !cursor.isNull(index4)) { resultBean.setOwnerUid(cursor.getString(index4));}
        if (index5>=0 && !cursor.isNull(index5)) { resultBean.setText(cursor.getString(index5));}
        if (index6>=0 && !cursor.isNull(index6)) { resultBean.setType(cursor.getString(index6));}
        if (index7>=0 && !cursor.isNull(index7)) { resultBean.setUpdateTime(cursor.getLong(index7));}
        if (index8>=0 && !cursor.isNull(index8)) { resultBean.setValid(cursor.getInt(index8)==0?false:true);}

        listener.onRow(resultBean, cursor.getPosition(),cursor.getCount());
      } while (cursor.moveToNext());
    }
    cursor.close();
  }

  public static BindChannelMessageCursor create(Cursor cursor) {
    return new BindChannelMessageCursor(cursor);
  }

  /**
   * Listener for row read from database.
   *
   * @param bean bean read from database. Only selected columns/fields are valorized.
   * @param rowPosition position of row.
   * @param rowCount total number of rows.
   *
   */
  public interface OnChannelMessageListener {
    void onRow(ChannelMessage bean, int rowPosition, int rowCount);
  }
}
