package com.abubusoft.kripton.example01;

import android.database.Cursor;
import com.abubusoft.kripton.android.sqlite.AbstractBindDao;
import com.abubusoft.kripton.common.Logger;
import com.abubusoft.kripton.common.StringUtil;
import java.util.LinkedList;
import java.util.List;

/**
 * Generated by Kripton Library.
 *
 * @since Fri Jun 17 19:41:23 CEST 2016
 *
 */
public class BindDaoChannelMessage extends AbstractBindDao implements DaoChannelMessage {
  /**
   * <p>Insert query:</p>
   * <pre>INSERT INTO channel_message (uid, image, day, owner_uid, text, type, update_time, valid) VALUES (${bean.uid}, ${bean.image}, ${bean.day}, ${bean.ownerUid}, ${bean.text}, ${bean.type}, ${bean.updateTime}, ${bean.valid})</pre>
   * <p><code>bean.id</code> is automatically updated because it is the primary key</p>
   *
   * @param bean
   * 	used as updated field and in where condition
   * @return id of inserted record
   */
  @Override
  public long insertBean(ChannelMessage bean) {
    contentValues.clear();

    if (bean.getUid()!=null) {
      contentValues.put("uid", bean.getUid());
    } else {
      contentValues.putNull("uid");
    }

    if (bean.getImage()!=null) {
      contentValues.put("image", bean.getImage());
    } else {
      contentValues.putNull("image");
    }

    if (bean.getDay()!=null) {
      contentValues.put("day", bean.getDay().toString());
    } else {
      contentValues.putNull("day");
    }

    if (bean.getOwnerUid()!=null) {
      contentValues.put("owner_uid", bean.getOwnerUid());
    } else {
      contentValues.putNull("owner_uid");
    }

    if (bean.getText()!=null) {
      contentValues.put("text", bean.getText());
    } else {
      contentValues.putNull("text");
    }

    if (bean.getType()!=null) {
      contentValues.put("type", bean.getType());
    } else {
      contentValues.putNull("type");
    }

    contentValues.put("update_time", bean.getUpdateTime());

    contentValues.put("valid", bean.isValid());

    // log
    Logger.info(StringUtil.formatSQL("SQL: INSERT INTO channel_message (uid, image, day, owner_uid, text, type, update_time, valid) VALUES ('"+StringUtil.checkSize(contentValues.get("uid"))+"', '"+StringUtil.checkSize(contentValues.get("image"))+"', '"+StringUtil.checkSize(contentValues.get("day"))+"', '"+StringUtil.checkSize(contentValues.get("owner_uid"))+"', '"+StringUtil.checkSize(contentValues.get("text"))+"', '"+StringUtil.checkSize(contentValues.get("type"))+"', '"+StringUtil.checkSize(contentValues.get("update_time"))+"', '"+StringUtil.checkSize(contentValues.get("valid"))+"')"));
    long result = database.insert("channel_message", null, contentValues);
    bean.setId(result);

    return result;
  }

  /**
   * <p>Insert query:</p>
   * <pre>INSERT INTO channel_message (uid, image, day, owner_uid, text, type, update_time, valid) VALUES (${bean.uid}, ${bean.image}, ${bean.day}, ${bean.ownerUid}, ${bean.text}, ${bean.type}, ${bean.updateTime}, ${bean.valid})</pre>
   * <p><code>bean.id</code> is automatically updated because it is the primary key</p>
   *
   * @param bean
   * 	used as updated field and in where condition
   * @return id of inserted record
   */
  @Override
  public long insertBeanAll(ChannelMessage bean) {
    contentValues.clear();

    if (bean.getUid()!=null) {
      contentValues.put("uid", bean.getUid());
    } else {
      contentValues.putNull("uid");
    }

    if (bean.getImage()!=null) {
      contentValues.put("image", bean.getImage());
    } else {
      contentValues.putNull("image");
    }

    if (bean.getDay()!=null) {
      contentValues.put("day", bean.getDay().toString());
    } else {
      contentValues.putNull("day");
    }

    if (bean.getOwnerUid()!=null) {
      contentValues.put("owner_uid", bean.getOwnerUid());
    } else {
      contentValues.putNull("owner_uid");
    }

    if (bean.getText()!=null) {
      contentValues.put("text", bean.getText());
    } else {
      contentValues.putNull("text");
    }

    if (bean.getType()!=null) {
      contentValues.put("type", bean.getType());
    } else {
      contentValues.putNull("type");
    }

    contentValues.put("update_time", bean.getUpdateTime());

    contentValues.put("valid", bean.isValid());

    // log
    Logger.info(StringUtil.formatSQL("SQL: INSERT INTO channel_message (uid, image, day, owner_uid, text, type, update_time, valid) VALUES ('"+StringUtil.checkSize(contentValues.get("uid"))+"', '"+StringUtil.checkSize(contentValues.get("image"))+"', '"+StringUtil.checkSize(contentValues.get("day"))+"', '"+StringUtil.checkSize(contentValues.get("owner_uid"))+"', '"+StringUtil.checkSize(contentValues.get("text"))+"', '"+StringUtil.checkSize(contentValues.get("type"))+"', '"+StringUtil.checkSize(contentValues.get("update_time"))+"', '"+StringUtil.checkSize(contentValues.get("valid"))+"')"));
    long result = database.insert("channel_message", null, contentValues);
    bean.setId(result);

    return result;
  }

  /**
   * <p>Update query:</p>
   * <pre>UPDATE channel_message SET uid=${bean.uid} WHERE id = ${bean.id}</pre>
   *
   * @param bean
   * 	used as updated field and in where condition
   *
   * @return number of updated records
   */
  @Override
  public long updateBean(ChannelMessage bean) {
    contentValues.clear();

    if (bean.getUid()!=null) {
      contentValues.put("uid", bean.getUid());
    } else {
      contentValues.putNull("uid");
    }

    String[] whereConditions={String.valueOf(bean.getId())};

    Logger.info(StringUtil.formatSQL("UPDATE channel_message SET uid='"+StringUtil.checkSize(contentValues.get("uid"))+"' WHERE id = %s"), (Object[])whereConditions);
    int result = database.update("channel_message", contentValues, "id = ?", whereConditions);
    return result;
  }

  /**
   * <p>Update query:</p>
   * <pre>UPDATE channel_message SET uid=${bean.uid}, image=${bean.image}, day=${bean.day}, owner_uid=${bean.ownerUid}, text=${bean.text}, type=${bean.type}, update_time=${bean.updateTime}, valid=${bean.valid} WHERE ownerUid = ${bean.ownerUid}</pre>
   *
   * @param bean
   * 	used as updated field and in where condition
   *
   * @return number of updated records
   */
  @Override
  public long updatBeanAll(ChannelMessage bean) {
    contentValues.clear();

    if (bean.getUid()!=null) {
      contentValues.put("uid", bean.getUid());
    } else {
      contentValues.putNull("uid");
    }

    if (bean.getImage()!=null) {
      contentValues.put("image", bean.getImage());
    } else {
      contentValues.putNull("image");
    }

    if (bean.getDay()!=null) {
      contentValues.put("day", bean.getDay().toString());
    } else {
      contentValues.putNull("day");
    }

    if (bean.getOwnerUid()!=null) {
      contentValues.put("owner_uid", bean.getOwnerUid());
    } else {
      contentValues.putNull("owner_uid");
    }

    if (bean.getText()!=null) {
      contentValues.put("text", bean.getText());
    } else {
      contentValues.putNull("text");
    }

    if (bean.getType()!=null) {
      contentValues.put("type", bean.getType());
    } else {
      contentValues.putNull("type");
    }

    contentValues.put("update_time", bean.getUpdateTime());

    contentValues.put("valid", bean.isValid());

    String[] whereConditions={(bean.getOwnerUid()==null?null:String.valueOf(bean.getOwnerUid()))};

    Logger.info(StringUtil.formatSQL("UPDATE channel_message SET uid='"+StringUtil.checkSize(contentValues.get("uid"))+"', image='"+StringUtil.checkSize(contentValues.get("image"))+"', day='"+StringUtil.checkSize(contentValues.get("day"))+"', owner_uid='"+StringUtil.checkSize(contentValues.get("owner_uid"))+"', text='"+StringUtil.checkSize(contentValues.get("text"))+"', type='"+StringUtil.checkSize(contentValues.get("type"))+"', update_time='"+StringUtil.checkSize(contentValues.get("update_time"))+"', valid='"+StringUtil.checkSize(contentValues.get("valid"))+"' WHERE ownerUid = %s"), (Object[])whereConditions);
    int result = database.update("channel_message", contentValues, "owner_uid = ?", whereConditions);
    return result;
  }

  /**
   * <p>Delete query:</p>
   * <pre>DELETE channel_message WHERE id=${bean.id}</pre>
   *
   * @param bean
   * 	used as updated field and in where condition
   *
   * @return number of deleted records
   */
  @Override
  public long deleteBean(ChannelMessage bean) {
    String[] whereConditions={String.valueOf(bean.getId())};

    Logger.info(StringUtil.formatSQL("DELETE channel_message WHERE uid='"+StringUtil.checkSize(contentValues.get("uid"))+"', image='"+StringUtil.checkSize(contentValues.get("image"))+"', day='"+StringUtil.checkSize(contentValues.get("day"))+"', owner_uid='"+StringUtil.checkSize(contentValues.get("owner_uid"))+"', text='"+StringUtil.checkSize(contentValues.get("text"))+"', type='"+StringUtil.checkSize(contentValues.get("type"))+"', update_time='"+StringUtil.checkSize(contentValues.get("update_time"))+"', valid='"+StringUtil.checkSize(contentValues.get("valid"))+"'"), (Object[])whereConditions);
    int result = database.delete("channel_message", "id=?", whereConditions);
    return result;
  }

  /**
   * <p>Select query is:</p>
   * <pre>SELECT DISTINCT id, image, day, owner_uid, text, type, update_time, valid FROM channel_message WHERE id = ${bean.valid} HAVING uid = ${uid} </pre>
   *
   * <p>Its parameters are:</p>
   *
   * <pre>[bean.valid, uid]</pre>
   *
   * <p>Projected column are:</p>
   *
   * <pre>[id, image, day, owner_uid, text, type, update_time, valid]</pre>
   *
   * @param bean
   * @param uid
   *
   * @return list of bean or empty list.
   */
  @Override
  public List<ChannelMessage> selectList(ChannelMessage bean, long uid) {
    // build where condition
    String[] args={String.valueOf(bean.isValid()), String.valueOf(uid)};

    Logger.info(StringUtil.formatSQL("SELECT DISTINCT id, image, day, owner_uid, text, type, update_time, valid FROM channel_message WHERE id = '%s' HAVING uid = '%s' "),(Object[])args);
    Cursor cursor = database.rawQuery("SELECT DISTINCT id, image, day, owner_uid, text, type, update_time, valid FROM channel_message WHERE id = ? HAVING uid = ? ", args);
    Logger.info("Rows found: %s",cursor.getCount());

    LinkedList<ChannelMessage> resultList=new LinkedList<ChannelMessage>();
    ChannelMessage resultBean=null;

    if (cursor.moveToFirst()) {

      int index0=cursor.getColumnIndex("id");
      int index1=cursor.getColumnIndex("image");
      int index2=cursor.getColumnIndex("day");
      int index3=cursor.getColumnIndex("owner_uid");
      int index4=cursor.getColumnIndex("text");
      int index5=cursor.getColumnIndex("type");
      int index6=cursor.getColumnIndex("update_time");
      int index7=cursor.getColumnIndex("valid");

      do
       {
        resultBean=new ChannelMessage();

        if (!cursor.isNull(index0)) { resultBean.setId(cursor.getLong(index0)); }
        if (!cursor.isNull(index1)) { resultBean.setImage(cursor.getBlob(index1)); }
        if (!cursor.isNull(index2)) { resultBean.setDay(DayType.valueOf(cursor.getString(index2))); }
        if (!cursor.isNull(index3)) { resultBean.setOwnerUid(cursor.getString(index3)); }
        if (!cursor.isNull(index4)) { resultBean.setText(cursor.getString(index4)); }
        if (!cursor.isNull(index5)) { resultBean.setType(cursor.getString(index5)); }
        if (!cursor.isNull(index6)) { resultBean.setUpdateTime(cursor.getLong(index6)); }
        if (!cursor.isNull(index7)) { resultBean.setValid(cursor.getInt(index7)==0?false:true); }

        resultList.add(resultBean);
      } while (cursor.moveToNext());
    }
    cursor.close();

    return resultList;
  }

  /**
   * <p>Delete query:</p>
   * <pre>DELETE channel_message WHERE uid=${bean.uid}</pre>
   *
   * @param bean
   * 	used as updated field and in where condition
   *
   * @return number of deleted records
   */
  @Override
  public long deleteBeanAll(ChannelMessage bean) {
    String[] whereConditions={(bean.getUid()==null?null:String.valueOf(bean.getUid()))};

    Logger.info(StringUtil.formatSQL("DELETE channel_message WHERE uid='"+StringUtil.checkSize(contentValues.get("uid"))+"', image='"+StringUtil.checkSize(contentValues.get("image"))+"', day='"+StringUtil.checkSize(contentValues.get("day"))+"', owner_uid='"+StringUtil.checkSize(contentValues.get("owner_uid"))+"', text='"+StringUtil.checkSize(contentValues.get("text"))+"', type='"+StringUtil.checkSize(contentValues.get("type"))+"', update_time='"+StringUtil.checkSize(contentValues.get("update_time"))+"', valid='"+StringUtil.checkSize(contentValues.get("valid"))+"'"), (Object[])whereConditions);
    int result = database.delete("channel_message", "uid=?", whereConditions);
    return result;
  }
}
