package com.abubusoft.kripton.processor.test03;

import static com.abubusoft.kripton.common.StringUtil.checkSize;

import com.abubusoft.kripton.android.sqlite.AbstractBindDao;
import com.abubusoft.kripton.common.Logger;
import java.lang.Override;
import java.lang.String;

/**
 * Generated by Kripton Library.
 *
 * @since Tue Jun 07 22:47:02 CEST 2016
 *
 */
public class BindDaoBean02 extends AbstractBindDao implements DaoBean02 {
  /**
   * <p>Insert query:</p>
   * <pre>INSERT INTO bean01 (message_date, message_text, value) VALUES (${bean.messageDate}, ${bean.messageText}, ${bean.value})</pre>
   * <p><code>bean.id</code> is automatically updated because it is the primary key</p>
   *
   * @param bean
   * 	used as updated field and in where condition
   * @return id of inserted record
   */
  @Override
  public long insert(Bean01 bean) {
    contentValues.clear();

    contentValues.put("message_date", bean.getMessageDate());

    if (bean.getMessageText()!=null) {
      contentValues.put("message_text", bean.getMessageText());
    } else {
      contentValues.putNull("message_text");
    }

    contentValues.put("value", bean.getValue());

    // log
    Logger.info("SQL: INSERT INTO bean01 (message_date, message_text, value) VALUES ('"+checkSize(contentValues.get("message_date"))+"', '"+checkSize(contentValues.get("message_text"))+"', '"+checkSize(contentValues.get("value"))+"')");
    long result = database.insert("bean01", null, contentValues);
    bean.setId(result);

    return result;
  }

  /**
   * <p>Insert query:</p>
   * <pre>INSERT INTO bean01 (value, message_date) VALUES (${value}, ${messageDate})</pre>
   *
   * @param value
   * 	used as updated field and in where condition
   * @param messageDate
   * 	used as updated field and in where condition
   * @return id of inserted record
   */
  @Override
  public long insert(String value, long messageDate) {
    contentValues.clear();

    contentValues.put("value", value);

    contentValues.put("message_date", messageDate);

    // log
    Logger.info("SQL: INSERT INTO bean01 (value, message_date) VALUES ('"+checkSize(contentValues.get("value"))+"', '"+checkSize(contentValues.get("message_date"))+"')");
    long result = database.insert("bean01", null, contentValues);
    return result;
  }

  /**
   * <p>Delete query:</p>
   * <pre>DELETE bean01 WHERE id=${id}</pre>
   *
   * @param id
   * 	used in where condition
   *
   * @return number of deleted records
   */
  @Override
  public long delete(long id) {
    String[] whereConditions={String.valueOf(id)};

    Logger.info("SQL: DELETE bean01 WHERE ", (Object[])whereConditions);
    int result = database.delete("bean01", "id=?", whereConditions);
    return result;
  }

  /**
   * <p>Delete query:</p>
   * <pre>DELETE bean01 WHERE id=${bean.id}</pre>
   *
   * @param bean
   * 	used as updated field and in where condition
   *
   * @return number of deleted records
   */
  @Override
  public long delete(Bean01 bean) {
    String[] whereConditions={String.valueOf(bean.getId())};

    Logger.info("DELETE bean01 WHERE message_date='"+checkSize(contentValues.get("message_date"))+"', message_text='"+checkSize(contentValues.get("message_text"))+"', value='"+checkSize(contentValues.get("value"))+"'", (Object[])whereConditions);
    int result = database.delete("bean01", "id=?", whereConditions);
    return result;
  }

  /**
   * <p>Update query:</p>
   * <pre>UPDATE bean01 SET value=${value} WHERE id>${id}</pre>
   *
   * @param value
   * 	used as updated field
   * @param id
   * 	used in where condition
   *
   * @return number of updated records
   */
  @Override
  public long update(String value, long id) {
    contentValues.clear();

    contentValues.put("value", value);

    String[] whereConditions={String.valueOf(id)};

    Logger.info("SQL: UPDATE bean01 SET value='"+checkSize(contentValues.get("value"))+"' WHERE id>%s", (Object[])whereConditions);
    int result = database.update("bean01", contentValues, "id>?", whereConditions);
    return result;
  }

  /**
   * <p>Update query:</p>
   * <pre>UPDATE bean01 SET message_date=${bean.messageDate}, message_text=${bean.messageText}, value=${bean.value} WHERE value=${bean.value}</pre>
   *
   * @param bean
   * 	used as updated field and in where condition
   *
   * @return number of updated records
   */
  @Override
  public long update(Bean01 bean) {
    contentValues.clear();

    contentValues.put("message_date", bean.getMessageDate());

    if (bean.getMessageText()!=null) {
      contentValues.put("message_text", bean.getMessageText());
    } else {
      contentValues.putNull("message_text");
    }

    contentValues.put("value", bean.getValue());

    String[] whereConditions={String.valueOf(bean.getValue())};

    Logger.info("UPDATE bean01 SET message_date='"+checkSize(contentValues.get("message_date"))+"', message_text='"+checkSize(contentValues.get("message_text"))+"', value='"+checkSize(contentValues.get("value"))+"' WHERE value=%s", (Object[])whereConditions);
    int result = database.update("bean01", contentValues, "value=?", whereConditions);
    return result;
  }
}
