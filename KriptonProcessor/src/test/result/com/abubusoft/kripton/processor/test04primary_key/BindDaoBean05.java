package com.abubusoft.kripton.processor.test04primary_key;

import android.database.Cursor;
import com.abubusoft.kripton.android.sqlite.AbstractBindDao;
import com.abubusoft.kripton.android.sqlite.ReadBeanListener;
import com.abubusoft.kripton.android.sqlite.ReadCursorListener;
import com.abubusoft.kripton.common.DateUtil;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;

/**
 * Generated by Kripton Library.
 *
 * @since Wed May 25 23:31:52 CEST 2016
 *
 */
public class BindDaoBean05 extends AbstractBindDao implements DaoBean05 {
  /**
   * <p>Select query is:</p>
   * <pre>select pk, text, content, creation_time from bean05 where pk=${id}</pre>
   *
   * <p>Its parameters are:</p>
   *
   * <pre>[id]</pre>
   *
   * <p>Projected column are:</p>
   *
   * <pre>[pk, text, content, creation_time]</pre>
   *
   * @param id
   *
   * @return selected bean or <code>null</code>.
   */
  @Override
  public Bean05 selectOne(long id) {
    // build where condition
    String[] args={String.valueOf(id)};

    Cursor cursor = database.rawQuery("select pk, text, content, creation_time from bean05 where pk=?", args);

    Bean05 resultBean=null;

    if (cursor.moveToFirst()) {

      int index0=cursor.getColumnIndex("pk");
      int index1=cursor.getColumnIndex("text");
      int index2=cursor.getColumnIndex("content");
      int index3=cursor.getColumnIndex("creation_time");

      resultBean=new Bean05();

      if (!cursor.isNull(index0)) { resultBean.setPk(cursor.getLong(index0)); }
      if (!cursor.isNull(index1)) { resultBean.setText(cursor.getString(index1)); }
      if (!cursor.isNull(index2)) { resultBean.setContent(cursor.getBlob(index2)); }
      if (!cursor.isNull(index3)) { resultBean.setCreationTime(DateUtil.read(cursor.getString(index3))); }

    }
    cursor.close();

    return resultBean;
  }

  /**
   * <p>Select query is:</p>
   * <pre>select pk, text, content, creation_time from bean05 where pk=${id}</pre>
   *
   * <p>Its parameters are:</p>
   *
   * <pre>[id]</pre>
   *
   * <p>Projected column are:</p>
   *
   * <pre>[pk, text, content, creation_time]</pre>
   *
   * @param id
   *
   * @return list of bean or empty list.
   */
  @Override
  public List<Bean05> selectAll(long id) {
    // build where condition
    String[] args={String.valueOf(id)};

    Cursor cursor = database.rawQuery("select pk, text, content, creation_time from bean05 where pk=?", args);

    LinkedList<Bean05> resultList=new LinkedList<Bean05>();
    Bean05 resultBean=null;

    if (cursor.moveToFirst()) {

      int index0=cursor.getColumnIndex("pk");
      int index1=cursor.getColumnIndex("text");
      int index2=cursor.getColumnIndex("content");
      int index3=cursor.getColumnIndex("creation_time");

      do
       {
        resultBean=new Bean05();

        if (!cursor.isNull(index0)) { resultBean.setPk(cursor.getLong(index0)); }
        if (!cursor.isNull(index1)) { resultBean.setText(cursor.getString(index1)); }
        if (!cursor.isNull(index2)) { resultBean.setContent(cursor.getBlob(index2)); }
        if (!cursor.isNull(index3)) { resultBean.setCreationTime(DateUtil.read(cursor.getString(index3))); }

        resultList.add(resultBean);
      } while (cursor.moveToNext());
    }
    cursor.close();

    return resultList;
  }

  /**
   * <p>Select query is:</p>
   * <pre>select pk from bean05 where  1 = 1</pre>
   *
   * <p>Its parameters are:</p>
   *
   * <pre>[]</pre>
   *
   * <p>Projected column are:</p>
   *
   * <pre>[pk]</pre>
   *
   *
   * @return list of single value extracted with query.
   */
  @Override
  public List<Long> selectPK() {
    // build where condition
    String[] args={};

    Cursor cursor = database.rawQuery("select pk from bean05 where  1 = 1", args);

    LinkedList<Long> resultList=new LinkedList<Long>();


    try {
      if (cursor.moveToFirst()) {

        do
         {
          if (!cursor.isNull(0)) {
            resultList.add(cursor.getLong(0));
          } else {
            resultList.add(null);
          }
        } while (cursor.moveToNext());
      }
    } catch(Throwable e) {
      throw (e);
    } finally {
      if (cursor!=null)
       {
        cursor.close();
      }
    }
    return resultList;
  }

  /**
   * <p>Select query is:</p>
   * <pre>select pk, text, content, creation_time from bean05 where pk=${id}</pre>
   *
   * <p>Its parameters are:</p>
   *
   * <pre>[id]</pre>
   *
   * <p>Projected column are:</p>
   *
   * <pre>[pk, text, content, creation_time]</pre>
   *
   * @param id
   * @param listener
   */
  @Override
  public void selectCursorListener(long id, ReadCursorListener listener) {
    // build where condition
    String[] args={String.valueOf(id)};

    Cursor cursor = database.rawQuery("select pk, text, content, creation_time from bean05 where pk=?", args);

    try {
      if (cursor.moveToFirst()) {

        do
         {
          listener.onRead(cursor);
        } while (cursor.moveToNext());
      }
    } finally {
      if (cursor!=null)
       {
        cursor.close();
      }
    }
  }

  /**
   * <p>Select query is:</p>
   * <pre>select pk, text, content, creation_time from bean05 where pk=${id}</pre>
   *
   * <p>Its parameters are:</p>
   *
   * <pre>[id]</pre>
   *
   * <p>Projected column are:</p>
   *
   * <pre>[pk, text, content, creation_time]</pre>
   *
   * @param id
   * @param listener
   */
  @Override
  public void selectBeanListener(long id, ReadBeanListener<Bean05> listener) {
    // build where condition
    String[] args={String.valueOf(id)};

    Cursor cursor = database.rawQuery("select pk, text, content, creation_time from bean05 where pk=?", args);
    Bean05 resultBean=new Bean05();

    try {
      if (cursor.moveToFirst()) {

        int index0=cursor.getColumnIndex("pk");
        int index1=cursor.getColumnIndex("text");
        int index2=cursor.getColumnIndex("content");
        int index3=cursor.getColumnIndex("creation_time");

        int rowCount=cursor.getCount();
        do
         {
          // reset mapping (only for nullable property)
          resultBean.setPk(0L);
          resultBean.setText(null);
          resultBean.setContent(null);
          resultBean.setCreationTime(null);

          // generate mapping
          if (!cursor.isNull(index0)) { resultBean.setPk(cursor.getLong(index0)); }
          if (!cursor.isNull(index1)) { resultBean.setText(cursor.getString(index1)); }
          if (!cursor.isNull(index2)) { resultBean.setContent(cursor.getBlob(index2)); }
          if (!cursor.isNull(index3)) { resultBean.setCreationTime(DateUtil.read(cursor.getString(index3))); }

          listener.onRead(resultBean, cursor.getPosition(), rowCount);
        } while (cursor.moveToNext());
      }
    } finally {
      if (cursor!=null)
       {
        cursor.close();
      }
    }
  }

  /**
   * <p>Select query is:</p>
   * <pre>select pk, text, content, creation_time from bean05 where pk=${id}</pre>
   *
   * <p>Its parameters are:</p>
   *
   * <pre>[id]</pre>
   *
   * <p>Projected column are:</p>
   *
   * <pre>[pk, text, content, creation_time]</pre>
   *
   * @param id
   * @param listener
   */
  @Override
  public void selectOne(long id, ReadCursorListener listener) {
    // build where condition
    String[] args={String.valueOf(id)};

    Cursor cursor = database.rawQuery("select pk, text, content, creation_time from bean05 where pk=?", args);

    try {
      if (cursor.moveToFirst()) {

        do
         {
          listener.onRead(cursor);
        } while (cursor.moveToNext());
      }
    } finally {
      if (cursor!=null)
       {
        cursor.close();
      }
    }
  }

  /**
   * <p>Select query is:</p>
   * <pre>select pk, text, content, creation_time from bean05 where pk=${id}</pre>
   *
   * <p>Its parameters are:</p>
   *
   * <pre>[id]</pre>
   *
   * <p>Projected column are:</p>
   *
   * <pre>[pk, text, content, creation_time]</pre>
   *
   * @param id
   * @param listener
   */
  @Override
  public void selectOne(long id, ReadBeanListener<Bean05> listener) {
    // build where condition
    String[] args={String.valueOf(id)};

    Cursor cursor = database.rawQuery("select pk, text, content, creation_time from bean05 where pk=?", args);
    Bean05 resultBean=new Bean05();

    try {
      if (cursor.moveToFirst()) {

        int index0=cursor.getColumnIndex("pk");
        int index1=cursor.getColumnIndex("text");
        int index2=cursor.getColumnIndex("content");
        int index3=cursor.getColumnIndex("creation_time");

        int rowCount=cursor.getCount();
        do
         {
          // reset mapping (only for nullable property)
          resultBean.setPk(0L);
          resultBean.setText(null);
          resultBean.setContent(null);
          resultBean.setCreationTime(null);

          // generate mapping
          if (!cursor.isNull(index0)) { resultBean.setPk(cursor.getLong(index0)); }
          if (!cursor.isNull(index1)) { resultBean.setText(cursor.getString(index1)); }
          if (!cursor.isNull(index2)) { resultBean.setContent(cursor.getBlob(index2)); }
          if (!cursor.isNull(index3)) { resultBean.setCreationTime(DateUtil.read(cursor.getString(index3))); }

          listener.onRead(resultBean, cursor.getPosition(), rowCount);
        } while (cursor.moveToNext());
      }
    } finally {
      if (cursor!=null)
       {
        cursor.close();
      }
    }
  }

  /**
   * <p>Insert query:</p>
   * <pre>INSERT INTO bean05 (text, content, creation_time) VALUES (${text}, ${content}, ${creationTime})</pre>
   *
   * @param text
   * 	used as updated field and in where condition
   * @param content
   * 	used as updated field and in where condition
   * @param creationTime
   * 	used as updated field and in where condition
   * @return id of inserted record
   */
  @Override
  public long insertRaw(String text, byte[] content, Date creationTime) {
    contentValues.clear();

    contentValues.put("text", text);
    contentValues.put("content", content);
    contentValues.put("creation_time", DateUtil.write(creationTime));

    long result = database.insert("bean05", null, contentValues);
    return result;
  }

  /**
   * <p>Insert query:</p>
   * <pre>INSERT INTO bean05 (text, content, creation_time) VALUES (${bean.text}, ${bean.content}, ${bean.creationTime})</pre>
   * <p><code>bean.pk</code> is automatically updated because it is the primary key</p>
   *
   * @param bean
   * 	used as updated field and in where condition
   */
  @Override
  public void insert(Bean05 bean) {
    contentValues.clear();

    contentValues.put("text", bean.getText());
    contentValues.put("content", bean.getContent());
    contentValues.put("creation_time", DateUtil.write(bean.getCreationTime()));

    long result = database.insert("bean05", null, contentValues);
    bean.setPk(result);
  }

  /**
   * <p>Update query:</p>
   * <pre>UPDATE bean05 SET text=${bean.text}, content=${bean.content}, creationTime=${bean.creationTime} WHERE pk=${bean.pk} and text=${bean.text} and creationTime=${bean.creationTime}</pre>
   *
   * @param bean
   * 	used as updated field and in where condition
   *
   * @return number of updated records
   */
  @Override
  public long updateOne(Bean05 bean) {
    contentValues.clear();

    contentValues.put("text", bean.getText());
    contentValues.put("content", bean.getContent());
    contentValues.put("creation_time", DateUtil.write(bean.getCreationTime()));

    String[] whereConditions={String.valueOf(bean.getPk()), String.valueOf(bean.getText()), String.valueOf(DateUtil.write(bean.getCreationTime()))};
    int result = database.update("bean05", contentValues, "pk=? and text=? and creation_time=?", whereConditions);
    return result;
  }

  /**
   * <p>Update query:</p>
   * <pre>UPDATE bean05 SET content=${content}, text=${text} WHERE pk=${uid} and creationTime=${valido} and creationTime=${validoIn}</pre>
   *
   * @param content
   * 	used as updated field
   * @param text
   * 	used as updated field
   * @param uid
   * 	used in where condition
   * @param validoIn
   * 	used in where condition
   * @param valido
   * 	used in where condition
   *
   * @return number of updated records
   */
  @Override
  public long updateOne(byte[] content, String text, long uid, Date validoIn, Date valido) {
    contentValues.clear();

    contentValues.put("content", content);
    contentValues.put("text", text);

    String[] whereConditions={String.valueOf(uid), String.valueOf(DateUtil.write(valido)), String.valueOf(DateUtil.write(validoIn))};

    int result = database.update("bean05", contentValues, "pk=? and creation_time=? and creation_time=?", whereConditions);
    return result;
  }

  /**
   * <p>Delete query:</p>
   * <pre>DELETE bean05 WHERE pk=${bean.pk} and text=${bean.text} and creationTime=${bean.creationTime}</pre>
   *
   * @param bean
   * 	used as updated field and in where condition
   *
   * @return number of deleted records
   */
  @Override
  public long deleteOne(Bean05 bean) {
    String[] whereConditions={String.valueOf(bean.getPk()), String.valueOf(bean.getText()), String.valueOf(DateUtil.write(bean.getCreationTime()))};
    int result = database.delete("bean05", "pk=? and text=? and creation_time=?", whereConditions);
    return result;
  }

  /**
   * <p>Delete query:</p>
   * <pre>DELETE bean05 WHERE pk=${uid} and creationTime=${valido} and creationTime=${validoIn}</pre>
   *
   * @param uid
   * 	used in where condition
   * @param validoIn
   * 	used in where condition
   * @param valido
   * 	used in where condition
   *
   * @return number of deleted records
   */
  @Override
  public long updateOne(long uid, Date validoIn, Date valido) {
    String[] whereConditions={String.valueOf(uid), String.valueOf(DateUtil.write(valido)), String.valueOf(DateUtil.write(validoIn))};

    int result = database.delete("bean05", "pk=? and creation_time=? and creation_time=?", whereConditions);
    return result;
  }

  /**
   * <p>Delete query:</p>
   * <pre>DELETE bean05 WHERE pk=${id}</pre>
   *
   * @param id
   * 	used in where condition
   *
   * @return number of deleted records
   */
  @Override
  public long deleteOne(long id) {
    String[] whereConditions={String.valueOf(id)};

    int result = database.delete("bean05", "pk=?", whereConditions);
    return result;
  }

  /**
   * <p>Delete query:</p>
   * <pre>DELETE bean05 WHERE pk=${va.pk}</pre>
   *
   * @param va
   * 	used as updated field and in where condition
   *
   * @return number of deleted records
   */
  @Override
  public long deleteBean(Bean05 va) {
    String[] whereConditions={String.valueOf(va.getPk())};
    int result = database.delete("bean05", "pk=?", whereConditions);
    return result;
  }

  /**
   * <p>Select query is:</p>
   * <pre>select content from bean05 where pk=${id}</pre>
   *
   * <p>Its parameters are:</p>
   *
   * <pre>[id]</pre>
   *
   * <p>Projected column are:</p>
   *
   * <pre>[content]</pre>
   *
   * @param id
   *
   * @return single value extracted with query.
   */
  @Override
  public byte[] getOne(long id) {
    // build where condition
    String[] args={String.valueOf(id)};

    Cursor cursor = database.rawQuery("select content from bean05 where pk=?", args);
    byte[] result=null;

    try {
      if (cursor.moveToFirst()) {

        do
         {
          if (cursor.isNull(0)) { return null; }
          result=cursor.getBlob(0);
        } while (cursor.moveToNext());
      }
    } finally {
      if (cursor!=null)
       {
        cursor.close();
      }
    }
    return result;
  }
}
